<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd  
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd  
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd   
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<!-- Default url to get a token from OAuth -->
	<sec:http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager"
		use-expressions="true">
		<sec:csrf disabled="true" />
		<sec:intercept-url pattern="/oauth/token"
			access="isFullyAuthenticated()" />
		<sec:anonymous enabled="false" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
		
			<!-- Handle CORS (preflight OPTIONS requests must be anonymous) -->
        <sec:intercept-url method="OPTIONS" pattern="/oauth/token/**" access="isAnonymous()"/>
        <sec:cors configuration-source-ref="corsSource" />
	</sec:http>


	<!-- URLs should be protected and what roles have access to them -->
	<!-- Can define more patterns based on the protected resources hosted on 
		the server -->
	<sec:http pattern="/api/v1/**" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		use-expressions="true">
		<sec:csrf disabled="true" />
	<sec:anonymous enabled="false" />
		<!-- Protect oauth clients with resource ids -->
		<sec:custom-filter ref="resourceServerFilter"
			before="PRE_AUTH_FILTER" />
		<sec:access-denied-handler
			ref="oauthAccessDeniedHandler" />
			
		<sec:intercept-url method="OPTIONS" pattern="/**" access="isAnonymous()"/>
        <sec:cors configuration-source-ref="corsSource" />
	</sec:http>

	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="EXCHANGERPOINT/client" />
	</bean>

	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="EXCHANGERPOINT/client" />
		<property name="typeName" value="Basic" />
	</bean>

    <bean id="exceptionHandler"
		class="com.exchangerpoint.restservices.exception.RestApplicationExceptionHandler" />
		
	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager"
			ref="clientAuthenticationManager" />
	</bean>

	<bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
			<list>
				<bean
					class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean
					class="org.springframework.security.access.vote.RoleVoter" />
				<bean
					class="org.springframework.security.access.vote.AuthenticatedVoter" />
					<bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
			</list>
		</constructor-arg>
	</bean>

	<sec:authentication-manager
		id="clientAuthenticationManager">
		<sec:authentication-provider
			user-service-ref="clientDetailsUserService" >
		<sec:password-encoder ref="passwordEncoder" />
		</sec:authentication-provider>
	</sec:authentication-manager>


<bean  id="defaultPasswordEncoder" class = "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
    </bean>
    
    <util:map id="passwordEncodersMap">
        
        <entry key="bcrypt">
            <bean class = "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
            </bean>
        </entry>
    </util:map>
    
    <bean id ="passwordEncoder" class = "org.springframework.security.crypto.password.DelegatingPasswordEncoder" >
        <constructor-arg value="bcrypt"/>
        <constructor-arg ref="passwordEncodersMap"/>
        <property name="defaultPasswordEncoderForMatches" ref="defaultPasswordEncoder" />
    </bean>

	<bean name="exchangerPointUserDetailsService"
		class="com.exchangerpoint.restservices.service.ExchangerPointUserDetailsService" />
		
 
	<sec:authentication-manager
		id="authenticationManager" alias="authenticationManager">
		<sec:authentication-provider
			user-service-ref="exchangerPointUserDetailsService">
			<sec:password-encoder ref="passwordEncoder" />
			
			
		</sec:authentication-provider>
		    	</sec:authentication-manager>
	
	


	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
		<property name = "passwordEncoder" ref = "passwordEncoder"/> 
	
	</bean>

	<!-- This defines the token store. We have currently used in-memory token 
		store but we can instead use a user defined one <beans:bean id="tokenStore" 
		class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" 
		/> -->
	<!-- If need to store tokens in DB -->
	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
		<constructor-arg ref="dataSource" />
	</bean>


	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="accessTokenValiditySeconds" value="21600" />
		<property name="refreshTokenValiditySeconds" value="86400" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="oAuth2RequestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
		<constructor-arg ref="clientDetails" />
	</bean>
	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
		<property name="requestFactory" ref="oAuth2RequestFactory" />
		<property name="tokenStore" ref="tokenStore" />
	</bean>

	<!-- The server issuing access tokens to the client after successfully authenticating 
		the resource owner and obtaining authorization -->
	<oauth:authorization-server
		client-details-service-ref="clientDetails"
		token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<!-- Define protected resources hosted by the resource server -->
	<oauth:resource-server id="resourceServerFilter"
		resource-id="webProfile" token-services-ref="tokenServices" />

	<oauth:client-details-service
		id="clientDetails">
		<oauth:client client-id="web_truested_cleint"
			authorized-grant-types="password,refresh_token"
			secret="{bcrypt}$2a$10$zjizF57Mcs8arX9iqTd//O6YoFUqQ9206b98YGsOYEj2WgvZijTHW" scope="read,write,trust"
			authorities="ROLE_ADMIN" resource-ids="webProfile" />
	</oauth:client-details-service>



	<oauth:expression-handler
		id="oauthExpressionHandler" />
	<oauth:web-expression-handler
		id="oauthWebExpressionHandler" />
<bean id="corsSource" class="org.springframework.web.cors.UrlBasedCorsConfigurationSource">
        <property name="corsConfigurations">
            <util:map>
                <entry key="/**">
                    <bean class="org.springframework.web.cors.CorsConfiguration">
                        
                        <property name="allowedHeaders">
                            <list>
                                <value>Authorization</value>
                                <value>Content-Type</value>
                                 <value>Origin</value>
                                <value>X-Requested-With</value>
                                 <value>Accept</value>
                            </list>
                        </property>
                        <property name="allowedMethods">
                            <list>
                                <value>POST</value>
                                <value>GET</value>
                                <value>PUT</value>
                                <value>DELETE</value>
                                <value>OPTIONS</value>
                            </list>
                        </property>
                        <property name="allowedOrigins" value="*" />
                        <property name="exposedHeaders">
                            <list>
                                <value>Location</value>
                                <value>Content-Disposition</value>
                            </list>
                        </property>
                        <property name="maxAge" value="86400" />
                    </bean>
                </entry>
            </util:map>
        </property>
    </bean>
    
    <bean id="messageSource"   
    class="org.springframework.context.support.ResourceBundleMessageSource">  
    <property name="basenames">  
        <list>
            <value>message</value>
        </list>
    </property>
</bean>
</beans>